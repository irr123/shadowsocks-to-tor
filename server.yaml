- name: default
  hosts: server
  become: yes

  vars:
    ss_version_tag: "v1.23.4"
    ss_download_url: "https://github.com/shadowsocks/shadowsocks-rust/releases/download/{{ ss_version_tag }}/shadowsocks-{{ ss_version_tag }}.x86_64-unknown-linux-gnu.tar.xz"
    ss_archive_filename: "{{ ss_download_url | urlsplit('path') | basename }}"
    ss_download_temp_path: "/tmp/{{ ss_archive_filename }}"
    ss_install_dir: "/opt/shadowsocks/{{ ss_version_tag }}"
    ss_config_filename: "config.json"
    ss_encrypt_method: "chacha20-ietf-poly1305"
    ss_user: "ssuser"
    ss_server_port: 8388
    tor_trans_port: 9040
    tor_socks_port: 9050
    tor_dns_port: 9053
    sysctl_params:
      fs.file-max: '51200'
      net.core.netdev_max_backlog: '250000'
      net.core.rmem_max: '67108864'
      net.core.somaxconn: '4096'
      net.core.wmem_max: '67108864'
      net.ipv4.ip_forward: 1
      net.ipv4.ip_local_port_range: '10000 65000'
      net.ipv4.tcp_congestion_control: 'hybla'
      net.ipv4.tcp_fastopen: '3'
      net.ipv4.tcp_fin_timeout: '30'
      net.ipv4.tcp_keepalive_time: '1200'
      net.ipv4.tcp_max_syn_backlog: '8192'
      net.ipv4.tcp_max_tw_buckets: '5000'
      net.ipv4.tcp_mem: '25600 51200 102400'
      net.ipv4.tcp_mtu_probing: '1'
      net.ipv4.tcp_rmem: '4096 87380 67108864'
      net.ipv4.tcp_syncookies: '1'
      net.ipv4.tcp_tw_reuse: '1'
      net.ipv4.tcp_wmem: '4096 65536 67108864'

  tasks:
    - name: Configure nofile limits for root user in /etc/security/limits.conf
      ansible.builtin.blockinfile:
        path: /etc/security/limits.conf
        block: |
          root soft nofile 51200
          root hard nofile 51200
        marker: "# {mark} ANSIBLE MANAGED BLOCK for root user limits (Shadowsocks)"
        state: present

    - name: Apply kernel parameters from sysctl_params
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.conf
        state: present
        reload: yes
      loop: "{{ lookup('dict', sysctl_params) }}"

    - name: Install system deps
      ansible.builtin.apt:
        name: apt-transport-https, gnupg, iptables-persistent
        state: present
        update_cache: yes

    - name: Add Tor Project GPG key
      ansible.builtin.apt_key:
        url: https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc
        keyring: /usr/share/keyrings/deb.torproject.org-keyring.gpg
        state: present

    - name: Get distribution codename
      ansible.builtin.command:
        cmd: lsb_release -cs
      register: distro_codename
      changed_when: false

    - name: Add Tor Project repository to sources.list.d
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/tor.list
        content: |
          deb [signed-by=/usr/share/keyrings/deb.torproject.org-keyring.gpg] https://deb.torproject.org/torproject.org {{ distro_codename.stdout }} main
          deb-src [signed-by=/usr/share/keyrings/deb.torproject.org-keyring.gpg] https://deb.torproject.org/torproject.org {{ distro_codename.stdout }} main
        mode: '0644'

    - name: Update apt cache and install Tor and Tor keyring
      ansible.builtin.apt:
        name:
          - tor
          - deb.torproject.org-keyring
        state: present
        update_cache: yes

    - name: Setup /etc/tor/torrc
      ansible.builtin.copy:
        dest: /etc/tor/torrc
        owner: root
        group: root
        content: |
          AutomapHostsOnResolve 1
          AutomapHostsSuffixes .onion,.exit
          AvoidDiskWrites 1
          DNSPort 127.0.0.1:{{ tor_dns_port }}
          TransPort 127.0.0.1:{{ tor_trans_port }}
          SocksPort 127.0.0.1:{{ tor_socks_port }}
        mode: '0644'

    - name: Reload systemd and restart tor
      ansible.builtin.systemd:
        name: tor
        daemon_reload: yes
        state: restarted
        enabled: yes

    - name: Create system user ssuser
      ansible.builtin.user:
        name: "{{ ss_user }}"
        system: yes
        shell: /usr/sbin/nologin
        state: present

    - name: Get UID of ss_user
      ansible.builtin.command: id -u {{ ss_user }}
      register: ss_user_uid
      changed_when: false

    - name: Ensure the installation directory exists
      ansible.builtin.file:
        path: "{{ ss_install_dir }}"
        state: directory
        mode: '0755'

    - name: Download Shadowsocks-Rust archive
      ansible.builtin.get_url:
        url: "{{ ss_download_url }}"
        dest: "{{ ss_download_temp_path }}"
        mode: '0644'

    - name: Unarchive Shadowsocks-Rust
      ansible.builtin.unarchive:
        src: "{{ ss_download_temp_path }}"
        dest: "{{ ss_install_dir }}"
        remote_src: yes

    - name: Clean up downloaded archive (optional task)
      ansible.builtin.file:
        path: "{{ ss_download_temp_path }}"
        state: absent

    - name: Generate Shadowsocks password
      ansible.builtin.command:
        cmd: "{{ ss_install_dir }}/ssservice genkey --encrypt-method {{ ss_encrypt_method }}"
      register: genkey_output
      changed_when: true
      check_mode: no

    - name: Create Shadowsocks configuration file
      ansible.builtin.copy:
        dest: "{{ ss_install_dir }}/{{ ss_config_filename }}"
        content: |
          {
              "server":"{{ ansible_host }}",
              "server_port":{{ ss_server_port }},
              "local_port":1080,
              "password":"{{ genkey_output.stdout | trim }}",
              "method":"{{ ss_encrypt_method }}",
              "user":"{{ ss_user }}",
              "fast_open":true,
              "mode":"tcp_and_udp"
          }
        mode: '0644'

    - name: Create Shadowsocks systemd service unit file
      ansible.builtin.copy:
        dest: /etc/systemd/system/shadowsocks-server.service
        owner: root
        group: root
        content: |
          [Unit]
          Description=Shadowsocks-rust Server Service
          Documentation=https://github.com/shadowsocks/shadowsocks-rust
          After=network.target network-online.target
          Wants=network-online.target

          [Service]
          Type=simple
          User={{ ss_user }}
          Group={{ ss_user }}
          ExecStart={{ ss_install_dir }}/ssserver -c {{ ss_install_dir }}/{{ ss_config_filename }}
          WorkingDirectory={{ ss_install_dir }}
          LimitNOFILE=51200
          Restart=always
          RestartSec=5s

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Reload systemd and restart shadowsocks
      ansible.builtin.systemd:
        name: shadowsocks-server
        daemon_reload: yes
        state: restarted
        enabled: yes

    - name: Comprehensive iptables flush (all tables, delete chains, reset policies)
      ansible.builtin.shell: |
        set -e
        iptables -P INPUT ACCEPT
        iptables -P FORWARD ACCEPT
        iptables -P OUTPUT ACCEPT
        iptables -t nat -P PREROUTING ACCEPT
        iptables -t nat -P INPUT ACCEPT
        iptables -t nat -P OUTPUT ACCEPT
        iptables -t nat -P POSTROUTING ACCEPT
        iptables -t mangle -P PREROUTING ACCEPT
        iptables -t mangle -P INPUT ACCEPT
        iptables -t mangle -P FORWARD ACCEPT
        iptables -t mangle -P OUTPUT ACCEPT
        iptables -t mangle -P POSTROUTING ACCEPT
        iptables -t raw -P PREROUTING ACCEPT
        iptables -t raw -P OUTPUT ACCEPT
        iptables -F
        iptables -X
        iptables -Z
        iptables -t nat -F
        iptables -t nat -X
        iptables -t nat -Z
        iptables -t mangle -F || /bin/true
        iptables -t mangle -X || /bin/true
        iptables -t mangle -Z || /bin/true
        iptables -t raw -F || /bin/true
        iptables -t raw -X || /bin/true
        iptables -t raw -Z || /bin/true
      args:
        executable: /bin/bash
      changed_when: true

    - name: Ensure TOR_OUTPUT chain exists in nat table
      ansible.builtin.shell: "iptables -t nat -N TOR_OUTPUT || /bin/true"
      register: create_tor_output_nat
      changed_when: "'Chain already exists' not in create_tor_output_nat.stderr and create_tor_output_nat.rc == 0"

    - name: Redirect ss_user traffic from OUTPUT to TOR_OUTPUT chain
      ansible.builtin.shell: "iptables -t nat -A OUTPUT -m owner --uid-owner {{ ss_user_uid.stdout }} -j TOR_OUTPUT"
      changed_when: true

    - name: Exclude local/private networks and server's own IP from TOR_OUTPUT redirection
      ansible.builtin.shell: "iptables -t nat -A TOR_OUTPUT -d {{ item }} -j RETURN"
      loop:
        - "0.0.0.0/8"
        - "192.168.0.0/16"
        - "{{ ansible_host }}"
      changed_when: true

    - name: Exclude Tor TransPort from TOR_OUTPUT redirection to prevent loops
      ansible.builtin.shell: "iptables -t nat -A TOR_OUTPUT -d 127.0.0.1 -p tcp --dport {{ tor_trans_port }} -j RETURN"
      changed_when: true

    - name: Exclude Tor DNSPort from TOR_OUTPUT redirection to prevent loops
      ansible.builtin.shell: "iptables -t nat -A TOR_OUTPUT -d 127.0.0.1 -p udp --dport {{ tor_dns_port }} -j RETURN"
      changed_when: true

    - name: Redirect TCP to TOR
      ansible.builtin.shell: "iptables -t nat -A TOR_OUTPUT -p tcp -m tcp --syn -j REDIRECT --to-ports {{ tor_trans_port }}"
      changed_when: true

    - name: Redirect DNS to TOR
      ansible.builtin.shell: "iptables -t nat -A TOR_OUTPUT -p udp -m udp --dport 53 -j REDIRECT --to-ports {{ tor_dns_port }}"
      changed_when: true

    - name: Save iptables rules
      ansible.builtin.command: netfilter-persistent save
      changed_when: true

    - name: Print Shadowsocks password
      ansible.builtin.debug:
        msg: ---> {{ genkey_output.stdout }} <--
